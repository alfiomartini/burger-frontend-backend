version: "3.8"
# scripts: 'docker compose stop', 'docker compose up'
# creates dockerized mysql container with populated db burger_app

services:
  web:
    build:
      context: ./frontend
    environment:
      # this is needed for hot reload (at least in windows)
      - CHOKIDAR_USEPOLLING=true

    ports:
      - 5174:5174
    volumes:
      - ./frontend:/app
      - react-burger:/app/node_modules

    depends_on:
      - api

  api:
    build:
      context: ./backend

    ports:
      - 5500:5500

    environment:
      # this is needed for hot reload (at least in windows)
      - CHOKIDAR_USEPOLLING=true

    volumes:
      - ./backend:/node_app
      - express-burger:/node_app/node_modules

    networks:
      - mynetwork

    depends_on:
      mysql-db:
        condition: service_healthy

  mysql-db:
    image: mysql:8.3

    restart: always

    ports:
      - 3307:3306

    networks:
      - mynetwork

    volumes:
      # this script only runs when the container is first created
      - ./backend/src/database/schema/script.sql:/docker-entrypoint-initdb.d/0_script.sql
      # persistence of table data inbetween container creation and deletion
      - db-data:/var/lib/msql

    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PWD}
      - MYSQL_DATABASE=${MYSQL_DB}

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

volumes:
  db-data:
  express-burger:
  react-burger:

networks:
  mynetwork:
    driver: bridge
